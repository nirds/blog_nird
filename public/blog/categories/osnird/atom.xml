<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OSNird | NIRD Blog]]></title>
  <link href="http://nird-blog.herokuapp.com//blog/categories/osnird/atom.xml" rel="self"/>
  <link href="http://nird-blog.herokuapp.com//"/>
  <updated>2016-03-03T12:21:43-08:00</updated>
  <id>http://nird-blog.herokuapp.com//</id>
  <author>
    <name><![CDATA[NIRD, LLC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The First Gem Is The Sweetest]]></title>
    <link href="http://nird-blog.herokuapp.com//blog/2016/02/09/the-first-gem-is-the-sweetest/"/>
    <updated>2016-02-09T12:01:00-08:00</updated>
    <id>http://nird-blog.herokuapp.com//blog/2016/02/09/the-first-gem-is-the-sweetest</id>
    <content type="html"><![CDATA[<p>As my colleagues have mentioned in previous posts, we NIRDs have begun an initiative to contribute more to the open source community. As a junior developer who had never contributed to the open source community, this put me on unfamiliar ground. For many, that first step into the unknown is daunting &ndash; for me it was terrifying. I mean, I’m mostly self-taught, and as a result, I have a paralyzing fear of everyone discovering that I am a <a href="https://en.wikipedia.org/wiki/Impostor_syndrome">complete fraud</a>. ::Deep breath:: Until now, irrational self-preservation against an imaginary threat has won out over the desire to give back to the community that helped me get to where I am today; but that’s all changed (j/k I’m still scared, but I’m trying to be braver about <a href="http://fortune.com/2014/05/23/the-extraordinary-depressing-power-of-failing-upwards/">failing upwards</a>).</p>

<!-- more -->


<p>Thankfully, I wasn’t on my own &ndash; I was a part of a team! After dipping our toes into the open source pool by making a small contribution to someone else’s project, we decided that we wanted to learn something new &ndash; we wanted to build a gem. Since we were new to the process, we wanted to start with something small; conveniently, we had recently written a small amount of Javascript to integrate the handy <a href="https://github.com/mislav/will_paginate">will_paginate gem</a> into an AngularJS app, so this seemed like as good a point as any from which to proceed.</p>

<p>Since we had never built a gem, we began by researching the process. <a href="http://brandonhilkert.com/books/build-a-ruby-gem/">Build a Ruby Gem by Brandon Hilkert</a> was thorough coverage of the subject &ndash; but actually way more than we needed! See, we wanted to build a gem that fed some Javascript and CSS into the asset pipeline of the apps that would use it &ndash; in the larger scheme of things, that’s not too heavy duty. Luckily, there are several <a href="https://gorails.com/episodes/creating-gems-for-frontend-javascript-libraries">quick</a> and <a href="http://www.sitepoint.com/create-ruby-gem-jquery-plugin-basics/">dirty</a> <a href="http://brandonhilkert.com/blog/how-to-build-a-rails-engine/">guides</a> out there on to how to do this!</p>

<p>Since we had already built the feature into a project, it was really straightforward to pull it out into a gem. First, we abstracted the existing code as much as we could and took out any specific references to the app that it lived in. Generic code is reusable code, and what is a gem if not reusable code? Once we had done that, we just followed the guides linked to above on how to turn the code into a gem. Let me lift the main points from <a href="http://carlosbecker.com/posts/gemify-your-assets">Carlos Becker’s excellent post</a> to demonstrate how straightforward the process is:</p>

<ol>
<li><p>Create the project skeleton
All this takes is one command in the terminal!</p></li>
<li><p>Create the vendor/assets folder
In the case of our gem, we actually created the app/assets folder. Why? Because, if you’re including someone else’s javascript in a project, for example, convention dictates that you put it in the vendor/assets folder. It’s not like anything is going to explode if you put javascript you wrote in vendor/assets, but the contents of vendor/assets are understood to be something akin to gems &ndash; code by other people that you include in your project. Since we wrote this code, it’s going in our assets folder.</p></li>
<li><p>Copy the assets to the folders
All we did was move the files from the app we pulled our code from to PRETTY MUCH THE SAME EXACT PLACE (app/assets) in the gem we just made. Magical!</p></li>
<li><p>Test
Well&hellip;it can’t all be easy. This step is conquerable, but was definitely the hardest part of this project &ndash; so we’ll cover it in another post.</p></li>
</ol>


<p>Once all that was done, we tried out our new gem in our original project by adding it to that project’s gemfile and then bundling. Viola! ng_will_paginate delivered up some nicely paginated angular objects via rails and the will_paginate gem!</p>

<p>There are two morals to this story:</p>

<p>The Ruby on Rails community is a wonderland of handy stuff created by people who are enthusiastic about making useful stuff. This isn’t limited to incredibly niche gems &ndash; it includes blog posts about how to make incredibly niche gems!
The bar is easier to surmount than our fears may be telling us &ndash; we too, can produce something that is helpful to the community.</p>

<p>I can’t count the number of times stumbling across a casual mention of some small bit of Rails wisdom has helped me in my path to becoming a better developer. If you’ve solved a problem, I can almost guarantee that someone out there will benefit from it if you make it available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSNird: A Journey Into Open Source Gem-Making]]></title>
    <link href="http://nird-blog.herokuapp.com//blog/2016/01/07/osnird-a-journey-into-open-source-gem-making/"/>
    <updated>2016-01-07T15:16:00-08:00</updated>
    <id>http://nird-blog.herokuapp.com//blog/2016/01/07/osnird-a-journey-into-open-source-gem-making</id>
    <content type="html"><![CDATA[<h3><strong>Part 1: Introduction to GracePeriod &amp; README-Driven-Development</strong></h3>

<hr />

<p>  OSNird (for Open Source NIRD) is a new program here where NIRDs can spend work time contributing to open source projects. One team (Mike Pence, Adam Bell and myself) is writing a gem to address the imbalance that occurs when we place urgent concerns over important concerns and end up with technical debt. We are excited to take you with us on our learning journey in order to inspire more people to contribute to open source.</p>

<h3><strong>The Vision:</strong></h3>

<hr />

<p>  We all have those moments. Our feature must be shipped today so we cut corners. It’s hard to keep track of those pieces, especially when our manager now considers our feature done and has moved on to bigger and better features for us to implement. To extend and mix  the metaphor: all those cut corners are essentially swept under the rug. You won’t notice a couple under the rug, but eventually the rug becomes difficult to walk over without pain. Often by the time we are tripping over the technical debt, we have forgotten the story of that corner and how we were planning on fixing it. This is very inefficient. GracePeriod is designed to deal with these concerns. It will help developers hold their managers and themselves accountable to keep track of those corners and stay on top of technical debt. Through GracePeriod, we will be able to record contextual information about our  short cuts and our plans for correcting them so we will have a quick refresher available when the debt comes due.</p>

<!-- more -->


<h3><strong>The Team:</strong></h3>

<hr />

<p>  The GracePeriod contingent of OSNird is pretty new to open source contribution. Before this project, Mike was the only team member who had developed any gems. Mike is our team’s senior developer and is providing a lot of guidance to the rest of the team. Adam and I are junior developers, excited to be getting our feet wet in open source. We all have very different skills, and we have really been enjoying working together to make a helpful tool.</p>

<p>  We are a decentralized team. NIRD has a flexible work from home policy and has team members from all around the country. So with Mike in Florida, and Adam and me in Washington, this is also great experience in remote collaboration.</p>

<h3><strong>The Initial Exploration:</strong></h3>

<hr />

<p>  Our first step was to look at other gems that tackle similar problems as GracePeriod or that provide well-implemented gem patterns. Rubocop, cucumber and rspec are all gems that you can run from the command line that give you information about your app. Factory_girl is an excellent implementation of a  flexible file structure. Additionally, contracts.ruby provides a good example for establishing rules that raise various warnings or errors when they are broken.</p>

<h3><strong>README-Driven-Development:</strong></h3>

<hr />

<p>  In order to get our team on the same page with the application, we first wrote a README of what we wanted to build. As with all agile projects, the actual scope and implementation details will change over time, but creating a unifying document was a great way to get our ideas down and discuss any obvious differences in understanding what this gem is for.</p>

<p>  It was during this process that we came up with the name for the gem. Our first thought was time bomb dsl. While a time bomb is a relatively accurate metaphor for what we are doing, it is an unnecessarily  violent image. After some exploration, we started looking at vocabulary around the concept of debt, since it is technical debt that we are discussing. In the language of debt, a grace period is a period of time where no payment is required but the debt is still present. Grace periods come to an end and then there are notifications that repayments must start. This is our goal for this gem &ndash; to notify developers and their managers that the grace extended to pieces of technical debt has come to an end and payment is coming due.</p>

<p>  One of the key parts of our README-driven-development process was defining the user experience. How would grace periods be defined? What would be involved in their implementation? This will continue to be a shifting process. Putting a definition to our initial ideas, however, was a great way to get juniors as well as seniors involved early in the creation process since developing ideas and interfaces does not require deep technical know-how. This ability to pull in folks that don’t have the technical experience with gems increased buy-in and allowed the team to coalesce around a central document that everyone had the opportunity to contribute to.</p>

<p>  We hope that you will follow us on our journey as we learn how to make a really cool gem and contribute to open source. We will keep sharing what we learn on this blog, and you can also tune in to our livestreamed mob programming sessions on Fridays from 8am-10am PST at <a href="https://www.livecoding.tv/wmuengineer/">https://www.livecoding.tv/wmuengineer/</a> . There&rsquo;s even a live chat if you want to interact with us.</p>

<p>Stay tuned for the next post in this series, which will be about setup, configuration, and starting the gem.</p>
]]></content>
  </entry>
  
</feed>
